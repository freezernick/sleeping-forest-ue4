{
	"pi": {
		"prefix": "pi",
		"body": "${1|6.28318548,3.14159274,1.57079637|}",
		"description": [
			"Contains snippet for 2pi, pi, pi/2"
		]
	},
	"unitvector float2": {
		"prefix": "float2_unit",
		"body": "float2(1,1)"
	},
	"unitvector float3": {
		"prefix": "float3_unit",
		"body": "float3(${1|1\\,0\\,0,0\\,1\\,0,0\\,0\\,1|})"
	},
	"float3_XY": {
		"prefix": "f3_xy",
		"body": "float3(1,1,0)"
	},
	"float3_YZ": {
		"prefix": "f3_yz",
		"body": "float3(0,1,1)"
	},
	"float3_XZ": {
		"prefix": "f3_xz",
		"body": "float3(1,0,1)"
	},
	"Camera Position": {
		"prefix": "camera_position",
		"body": "ResolvedView.WorldCameraOrigin"
	},
	"Camera Vector": {
		"prefix": "camera_vector",
		"body": "Parameters.CameraVector"
	},
	"Object Position": {
		"prefix": "object_position",
		"body": "GetObjectWorldPosition(Parameters)"
	},
	"Rotate About Axis": {
		"prefix": "rotate_about_axis",
		"body": "RotateAboutAxis(float4(GetObjectOrientation(Parameters.PrimitiveId),${1:Angle}),${2:Pivot},${3:GetWorldPosition(Parameters)})",
		"description": [
			"Don't forget to multiply 2PI in angle since ue4 rotations are normalized betewwen (0,2PI)",
			"1 (float) : Angle of rotation",
			"2 (float3) : Pivot point",
			"3 (float3) : Point on the axis. WorldPosition can't go wrong"
		]
	},
	"Absolute World Position": {
		"prefix": "absolute_world_position",
		"body": "GetWorldPosition(Parameters)",
		"description": [
			"pixel position in the world."
		]
	},
	"Transform Position: Local to World": {
		"prefix": "transform_position_localtoworld",
		"body": "TransformLocalPositionToWorld(Parameters, MaterialFloat4(MaterialFloat3(Parameters.TexCoords[0].xy,Parameters.TexCoords[0].xy.r), 1).xyz).xyz",
		"description": [
			"Position vector from local to position in world"
		]
	},
	"Time": {
		"prefix": "time",
		"body": "View.GameTime",
		"description": "Time node"
	},
	"Texture Sample": {
		"prefix": "texture_sample",
		"body": "ProcessMaterialColorTextureLookup(Texture2DSampleBias(${1:TextureName}, Material.Texture2D_0Sampler,Parameters.TexCoords[0].xy,View.MaterialTextureMipBias))"
	},
	"Screen Position": {
		"prefix": "screen_position",
		"body": "GetScreenPosition(Parameters)",
		"description": [
			".uv for screen coordinates",
			".w is pixel position"
		]
	},
	"UVCoordinates": {
		"prefix": "texture_coordinates",
		"body": "Parameters.TexCoords[${1:0}].xy",
		"description": [
			"Input texture coordinates."
		]
	},
	"TextureLookup_Color": {
		"prefix": "texture_mip_biased",
		"body": "ProcessMaterialColorTextureLookup(Texture2DSampleBias(Material.Texture2D_${2:0}, Material.Texture2D_${2:0}Sampler, ${3|Parameters.TexCoords[0].xy,UV|}, -1 + View.MaterialTextureMipBias)",
		"description": [
			"Color texture lookup with mip-map biased"
		]
	},
	"TextureLookup_MipLevel": {
		"prefix": "texture_mip_level",
		"body": "ProcessMaterialColorTextureLookup(Texture2DSampleLevel(Material.Texture2D_${2:0}, Material.Texture2D_${2:0}Sampler, ${3|Parameters.TexCoords[0].xy,UV|}, float4(4)))"
	},
	"TextureLookup_MipNone": {
		"prefix": "texture_mip_none",
		"body": "ProcessMaterialColorTextureLookup(Texture2DSampleBias(Material.Texture2D_${2:0}, Material.Texture2D_${2:0}Sampler, ${3|Parameters.TexCoords[0].xy,UV|}, View.MaterialTextureMipBias));"
	},
	"Time(overflow fixed)": {
		"body": ""
	},
	"Pixel Normal": {
		"prefix": "pixel_normal_ws",
		"body": "Parameters.WorldNormal"
	},
	"Vertex Normal": {
		"prefix": "vertex_normal_ws",
		"body": "Parameters.TangentToWorld[2]"
	},
	"Vertex_All_Vectors": {
		"prefix": "vertex_vectors_ws",
		"body": "(float3x3)(Parameters.TangentToWorld)",
		"description": [
			"Contains three vectors. local X/Y(surface tangenst), local Z(Normal). All outputs in world space."
		]
	},
	"Vertex_Tangent_X": {
		"prefix": "vertex_tangent_x",
		"body": "Parameters.TangentToWorld[0]",
		"description": [
			"]Local X tangent per vertex"
		]
	},
	"Vertex_Tangent_Y": {
		"prefix": "vertex_tangent_y",
		"body": "Parameters.TangentToWorld[1]",
		"description": [
			"Local Y tangent per vertex"
		]
	},
	"power UE4": {
		"prefix": "power_ue4",
		"body": "PositiveClampedPow($1, $2);"
	},
	"Panner": {
		"prefix": "panner",
		"body": "(float2(0.1,0.1) * View.GameTime + Parameters.TexCoords[0].xy)"
	},
	"Rotator": {
		"prefix": "rotator",
		"body": [
			"float3 comps = float3(cos(View.GameTime), sin(View.GameTime), sin(View.GameTime) - 1); // sine is negative in 2nd quadrant. Multiply speed to time.",
			"float2 NeUV = Parameters.TexCoords[0].xy - float2(0.5,0.5); // Origin to center",
			"float2 RetUV = float2(dot(comps.xz, NeUV), dot(comps.yx, NeUV)); // Origin to original after transforming with center as pivot.",
			"return RetUV;"
		]
	},
	"ActorPosition": {
		"prefix": "actor_position",
		"body": [
			"GetActorWorldPosition(Parameters.PrimitiveId)"
		]
	},
	"Object Radius": {
		"prefix": "object_radius",
		"body": "GetPrimitiveData(Parameters.PrimitiveId).ObjectWorldPositionAndRadius.w"
	},
	"View Size": {
		"prefix": "view_size",
		"body": "View.ViewSizeAndInvSize.xy",
		"description": [
			"Size of the screen in pixels."
		]
	},
	"Object Orientation": {
		"prefix": "object_orientation",
		"body": "GetObjectOrientation(Parameters.PrimitiveId)",
		"description": [
			"At no rotation, Z is up for UE4"
		]
	},
	"LocalBoundsMin": {
		"prefix": "object_bound_min",
		"body": "GetPrimitiveData(Parameters.PrimitiveId).LocalObjectBoundsMin",
		"description": [
			"Tail end location of the object."
		]
	},
	"LocalBoundsMax": {
		"prefix": "object_bound_max",
		"body": "GetPrimitiveData(Parameters.PrimitiveId).LocalObjectBoundsMax",
		"description": [
			"Head end location of the object."
		]
	}
}