{
	"uprop : AbilitySystemComponent": {
		"body": [
			"UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Abilities\")",
			"\tUAbilitySystemComponent* $1;",
			"\n$0"
		],
		"prefix": "uprop_abilitysyscomp",
		"description": [
			""
		],
		"category": "AbilitySystem"
	},
	"uprop: TextBlock": {
		"body": [
			"UPROPERTY(meta = (BindWidget))",
			"\tUTextBlock* CurrentDialogue;",
			"\n$0"
		],
		"prefix": "uprop_textblock",
		"description": [
			"Adds UPROPERTY()"
		],
		"category": "UMG"
	},
	"uprop : AISightConfigData": {
		"body": [
			"UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"AI\")",
			"\tclass UAISenseConfig_Sight* SightConfig;",
			"\n$0"
		],
		"description": [
			"Configure this in class body to give sight to bot."
		],
		"prefix": "uprop_ai_sightconfig",
		"category": "AIModule"
	},
	"uprop : Base": {
		"body": [
			"UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Parameters\")",
			"\t$1;",
			"\n$0"
		],
		"prefix": "uprop",
		"category": "General"
	},
	"uprop : Boolean": {
		"body": [
			"UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Parameters\")",
			"\t${1|bool,TArray<bool>|} $2;",
			"\n$0"
		],
		"prefix": "uprop_bool",
		"category": "General"
	},
	"uprop : Boolean switch": {
		"body": [
			"UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Triggers\")",
			"\tbool $1 = false; // context",
			"\n$0"
		],
		"prefix": "uprop_switch",
		"category": "General"
	},
	"uprop : Box Component": {
		"body": [
			"UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Parameters\")",
			"\tUBoxComponent* $1;",
			"\n$0"
		],
		"prefix": "uprop_box",
		"category": "Engine"
	},
	"uprop : Floating point": {
		"body": [
			"UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Parameters\")",
			"\t${1|float,TArray<float>|} $2;",
			"\n$0"
		],
		"prefix": "uprop_float",
		"category": "General"
	},
	"uprop : GUID": {
		"body": [
			"UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Parameters\")",
			"\tFGuid guid;",
			"$0"
		],
		"prefix": "uprop_guid",
		"category": "Engine"
	},
	"uprop : Integer": {
		"body": [
			"UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Parameters\")",
			"\tint $1;",
			"$0"
		],
		"prefix": "uprop_int",
		"category": "General"
	},
	"uprop : ISMC property": {
		"body": [
			"UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Parameters\")",
			"\t${1|UInstancedStaticMeshComponent*,TArray<UInstancedStaticMeshComponent*>,TMap<int\\, UInstancedStaticMeshComponent*>|} $2;",
			"\n$0"
		],
		"description": [
			"Adds an Instanced Static Mesh Component property",
			"(Editable anywhere) Not recommended. try using maps/arrays.",
			"Also use _adv to make property editor readonly."
		],
		"prefix": "uprop_ismc",
		"category": "Procedural"
	},
	"uprop : Sphere Component": {
		"body": [
			"UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Parameters\")",
			"\t${1|USphereComponent*,TArray<USphereComponent*>,TMap<int\\, USphereComponent*>| $2;",
			"\n$0"
		],
		"prefix": "uprop_sphere",
		"category": "Engine"
	},
	"uprop : SplineComponent": {
		"body": [
			"UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Parameters\")",
			"\t${1|USplineComponent*,TArray<USplineComponent*>,TMap<int\\, USplineComponent*>|} $2;",
			"\n$0"
		],
		"description": [
			"An array of spline components"
		],
		"prefix": "uprop_spline",
		"category": "LevelDesign"
	},
	"uprop : StaticMesh": {
		"body": [
			"UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Parameters\")",
			"\t${1|UStaticMesh*,TArray<UStaticMesh*>,TMap<int\\, UStaticMesh*>|} $2;",
			"\n$0"
		],
		"prefix": "uprop_staticmesh",
		"category": "Engine"
	},
	"uprop : StaticMeshComponent": {
		"body": [
			"UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Parameters\")",
			"\t${1|UStaticMeshComponent*,TArray<UStaticMeshComponent*>,TMap<int\\, UStaticMeshComponent*>|} $2;",
			"\n$0"
		],
		"prefix": "uprop_meshcomp",
		"category": "Engine"
	},
	"uprop : String": {
		"body": [
			"UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Triggers\")",
			"\t${1|FString,TArray<FString>|} $2;",
			"\n$0"
		],
		"description": [
			"Add FString property/array."
		],
		"prefix": "uprop_string",
		"category": "General"
	},
	"uprop : Timer(Handle + Del)": {
		"body": [
			"FTimerDelegate Del$1; // context",
			"FTimerHandle Handle$1;"
		],
		"prefix": "uprop_timer",
		"category": "Gameplay"
	},
	"uprop : Transform": {
		"body": [
			"UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Parameters\")",
			"\t${1|FTransform,TArray<FTransform>,TMap<int\\, FTransform*>|} $2;",
			"\n$0"
		],
		"prefix": "uprop_transform",
		"category": "General"
	},
	"uprop : Vector": {
		"body": [
			"UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Parameters\")",
			"\t${1|FVector,TArray<FVector>,TMap<int\\, FVector>|} $2;",
			"\n$0"
		],
		"prefix": "uprop_vector",
		"category": "General"
	},
	"uprop : Asset Pointer": {
		"body": [
			"UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Parameters\")",
			"\tTAssetPtr<$2> $1;",
			"\n$0"
		],
		"prefix": "uprop_assetptr",
		"category": "Optimization"
	},
	"uprop : Subclass": {
		"body": [
			"UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Parameters\")",
			"\tTAssetSubclassOf<$2> $1; // context",
			"\n$0"
		],
		"prefix": "uprop_subclass",
		"description": [
			"Used to get references to blueprints. Activate context to get initializer."
		],
		"category": "General"
	},
	"ufunc": {
		"prefix": "ufunc",
		"body": [
			"UFUNCTION(BlueprintCallable, ${1|BlueprintImplementableEvent,BlueprintNativeEvent,BlueprintPure,|}, Category = \"C++\")",
			"\t${2|void,int,float,FString|} $3();",
			"\n$0"
		],
		"description": [
			"Iterate through specifiers with context keys."
		],
		"category": "Functions"
	},
	"ufunc_bpevent": {
		"prefix": "ufunc_bpevent",
		"body": [
			"UFUNCTION(BlueprintCallable, BlueprintImplementableEvent, Category = \"C++ Event\")",
			"void {1:EventName}();",
			"void {1:EventName}_Implementation() override;"
		],
		"description": [
			"Iterate through specifiers with context keys."
		],
		"category": "Functions"
	},
	"uprop : curves": {
		"prefix": "uprop_curve",
		"body": [
			"UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Parameters\")",
			"\t${1|UCurveFloat*,UCurveVector*,UCurveLinearCurve*|} $2;",
			"\n$0"
		],
		"description": [
			"uprop for the following curves {float, vector and color}."
		],
		"category": "LevelDesign"
	},
	"uprop : poselink": {
		"prefix": "uprop_poselink",
		"body": [
			"UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=Links)",
			"FPoseLink ${1:BasePose};"
		],
		"description": [
			"This Can Be Entire Anim Graph Up To This Point, or Any Combination of Other Nodes"
		],
		"category": "AnimGraph"
	},
	"uprop: poselink(component space)": {
		"prefix": "uprop_poselink_componentspace",
		"body": [
			"UPROPERTY(Category=Links)",
			"FComponentSpacePoseLink ${1:ComponentPose};"
		],
		"category": "AnimGraph"
	},
	"uprop: animationnode": {
		"prefix": "uprop_animgraph_pin",
		"body": [
			"UPROPERTY(Category=CustomAnim, meta(${1|PinShownByDefault,AlwaysAsPin,PinHiddenByDefault,NeverAsPin|}))",
			"${2|float} ${3:VarName};"
		],
		"category": "AnimGraph"
	},
	"uprop: vector 2d": {
		"prefix": "uprop_vec2d",
		"body": [
			"UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=Parameters)",
			"FVector2D ${1:VarName};"
		],
		"category": "General"
	},
	"uprop: arrow component": {
		"prefix": "uprop_arrow",
		"body": [
			"UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Parameters\")",
			"${1|UArrowComponent*, TArray<UArrowComponent*>|} $2;",
			"\n$0"
		],
		"category": "Engine"
	},
	"uprop: blackboard": {
		"prefix": "uprop_blackboard",
		"body": [
			"UPROPERTY(transient)",
			"class UBlackboardComponent* ${1:BlackboardComp}",
			"\n$0"
		],
		"category": "AIModule"
	},
	"uprop: behaviortree_comp": {
		"prefix": "uprop_behaviortree_comp",
		"body": [
			"UPROPERTY(transient)",
			"class UBehaviorTreeComponent* ${1:BehaviorComp}",
			"\n$0"
		],
		"category": "AIModule"
	},
	"uprop: behaviortree": {
		"prefix": "uprop_behaviortree",
		"body": [
			"UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Parameters\")",
			"class UBehaviorTree* ${1:BehaviorTree}",
			"\n$0"
		],
		"category": "AIModule"
	},
	"uprop: userwidget": {
		"prefix": "uprop_userwidget",
		"body": [
			"UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"UMG\")",
			"${1|UUserWidget*,TSubclassOf<UUserWidget>|} ${2:WidgetName}",
			"\n$0"
		],
		"category": "UMG"
	},
	"uprop: scriptinterface": {
		"prefix": "uscriptinterface",
		"body": [
			"TScriptInterface<${2:IPickupInterface}> ${1:BroadcastListener};"
		],
		"description": [
			"Utility to store references to interfaces. Set dynamically liek this",
			"BroadcastListener.SetObject(ActorRefAsInterface);",
			"BroadcastListener.SetInterface(Cast< IPickupInterface>(ActorRefAsInterface));",
			"NOTE : You should cast to the actor for the interface first"
		],
		"category": "Class Referencing"
	}
}