{
	"uinit: Initialize: Boolean Switch": {
		"prefix": "uinit_switch",
		"body": [
			"// Function(called on demand) will be bypassed while packaging",
			"if ($1 == true)",
			"{",
			"\t${2:// Insert a function here};",
			"\t$1 = false;",
			"}\n$0"
		]
	},
	"uinit: InstancedStaticMeshComponent(ISMC)": {
		"prefix": "uinit_ismc",
		"body": [
			"$1 = NewObject<UInstancedStaticMeshComponent>(this);",
			"$1->RegisterComponent();",
			"$1->AttachToComponent(RootComponent, FAttachmentTransformRules::KeepRelativeTransform);",
			"$1->SetStaticMesh(${2:YourMeshHere});",
			"$0"
		],
		"description": [
			"Initialises an uninitialized ISMC(NewObject/CDSo never used).",
			"Use in actors: replace RootComponent with your SceneComponent(if any)",
			"Use in ActorComps: use uinit_ismc_actorcomp instead",
			"You may use uinit_ismc_actorcomp if you are uncomfortable."
		]
	},
	"uinit: Initialize InstancedStaticMeshComponent(ISMC) for ActorCompoennts": {
		"prefix": "uinit_ismc_actorcomp",
		"body": [
			"$1 = NewObject<UInstancedStaticMeshComponent>(this->GetOwner()));",
			"$1->RegisterComponent();",
			"$1->AttachToComponent(GetOwner()->GetRootComponent(), FAttachmentTransformRules::KeepRelativeTransform);",
			"$1->SetStaticMesh(${2:YourMeshHere});",
			"$0"
		]
	},
	"Initialize: AI Sight Configuration": {
		"prefix": "uinit_sightconfig",
		"body": [
			"$1 = CreateDefaultSubobject<UAISenseConfig_Sight>(\"Sight Config\");",
			"$1->SightRadius = 400.0f;",
			"$1->LoseSightRadius = 500.0f;",
			"$1->PeripheralVisionAngleDegrees = 60.0f;",
			"$1->SetMaxAge(5.0f);",
			"$1->DetectionByAffiliation.bDetectEnemies = true;",
			"$1->DetectionByAffiliation.bDetectFriendlies = true;",
			"$1->DetectionByAffiliation.bDetectNeutrals = true;",
			"GetPerceptionComponent()->SetDominantSense(*$1->GetSenseImplementation());",
			"// Bind a function to eb called when new pawns of above affilicationa are detected...",
			"// GetPerceptionComponent()->OnPerceptionUpdated.AddDynamic(this, AAI_Bot_Controller::OnPawnDetected);",
			"GetPerceptionComponent()->ConfigureSense(*SightConfig);",
			"$0"
		],
		"description": [
			"Use to setup a UAISenseConfig_Sight class instance",
			"You are expected to first declare it, include headers and create the object using \"ucdo\""
		]
	},
	"InitializeL: Timer": {
		"prefix": "uinit_timer",
		"body": [
			"${1:Timer}Del.BindUFunction(this, FName(\"${2:MyFunction}\"));",
			"GetWorld()->GetTimerManager().SetTimer(${1:Timer}Handle, 5.0f, true, 0.0f);"
		]
	},
	"uinit : CameraShake": {
		"prefix": "uinit_camerashake_fields",
		"body": [
			"bSingleInstance = true;",
			"OscillationDuration = 1.5f;",
			"OscillationBlendInTime = 0.2f;",
			"OscillationBlendOutTime = 0.2f;",

			"RotOscillation.Pitch.Amplitude = 0.5;",
			"RotOscillation.Pitch.Frequency = 17.0;",

			"RotOscillation.Yaw.Amplitude = 0.5;",
			"RotOscillation.Yaw.Frequency = 8.5;",

			"RotOscillation.Roll.Amplitude = 0.5;",
			"RotOscillation.Roll.Frequency = 4.75;",

			"LocOscillation.Z.Amplitude = 2.0f;",
			"LocOscillation.Z.Frequency = 17.0f;"
		],
		"description": ["Lists out parameters used for a camera shake. Use in constructor."]
	},
	"uinit: AnimNode_Struct": {
		"prefix": "uinit_animnode_struct",
		"body": [
			"public:",
			"\tvirtual void Initialize_AnyThread(const FAnimationInitializeContext& Context) override;",
			"\tvirtual void Update_AnyThread(const FAnimationUpdateContext& Context) override;",
			"\tvirtual void Evaluate_AnyThread(FPoseContext& Output) override;"
		]
	}
}
